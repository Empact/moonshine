<VirtualHost *:80>
    ServerName <%= configatron.domain || `hostname -f` %>
    DocumentRoot <%= configatron.deploy_to + "/current/public" %>

    <Directory <%= configatron.deploy_to + "/current/public" %>>
      Options FollowSymLinks
      AllowOverride None
      Order allow,deny
      Allow from all
    </Directory>

    ##
    ## The following options are Rails specific options. They may occur
    ## here in your VirtualHost entry or in the global configuration.
    ##

    ## RailsAutoDetect
    #
    # Set whether Phusion Passenger should automatically detect whether
    # a virtual host's document root is a Ruby on Rails application.
    # The default is on.
    # Options: <on|off>

    RailsAutoDetect <%= passenger_config_boolean(configatron.passenger.rails_auto_detect) || 'On' %>

    ## RailsBaseURI
    #
    # Specify that the given URI is a Rails application. It is allowed to
    # specify this option multiple times. Do this to deploy multiple
    # Rails applications in different sub-URIs under the same virtual host.
    <% unless configatron.passenger.rails_base_uri.nil? %>
    RailsBaseURI configatron.passenger.rails_base_uri
    <% else %>
    # RailsBaseURI <uri>
    <% end %>

    ## RailsAllowModRewrite
    #
    # Passenger will not override mod_rewrite rules if this option
    # is enabled.
    # Options: <on|off>

    RailsAllowModRewrite <%= passenger_config_boolean(configatron.passenger.allow_mod_rewrite) || 'Off' %>

    ## RailsEnv
    #
    # Use this option to specify the default RAILS_ENV value. The default
    # setting is production.

    RailsEnv <%= configatron.passenger.rails_env || ENV['RAILS_ENV'] || 'production' %>

    ## RailsSpawnMethod
    #
    # Internally, Phusion Passenger spawns multiple Ruby on Rails processes
    # in order to handle requests. But there are multiple ways with which
    # processes can be spawned, each having its own set of pros and cons.
    # Supported spawn methods are:
    #  smart
    #    When this spawn method is used, Phusion Passenger will attempt
    #    to cache Ruby on Rails framework code and application code for
    #    a limited period of time.
    #
    #  conservative
    #    This spawning method is similar to the one used in Mongrel Cluster.
    #    It does not perform any code caching at all.

    RailsSpawnMethod <%= configatron.passenger.rails_spawn_method || 'smart' %>

<%= configatron.passenger.vhost_extra %>
</VirtualHost>